
let mk_array n = 
  if (n < 1 || n > 10) then _bot_ else
  ref a = (0,0,0,0,0,0,0,0,0,0) in
  let a_size _ = 5 in
  let a_get i =
    if (i < 1 || i > n) then _bot_ else
    let (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) = !a in
    if i = 0 then a0 else
    if i = 1 then a1 else
    if i = 2 then a2 else
    if i = 3 then a3 else
    if i = 4 then a4 else
    if i = 5 then a5 else
    if i = 6 then a6 else
    if i = 7 then a7 else
    if i = 8 then a8 else
    if i = 9 then a9 else _bot_
  in
  let a_set i = fun m ->
    if (i < 1 || i > n) then _bot_ else
    let (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) = !a in
    if i = 0 then a := (m,a1,a2,a3,a4,a5,a6,a7,a8,a9) else
    if i = 1 then a := (a0,m,a2,a3,a4,a5,a6,a7,a8,a9) else
    if i = 2 then a := (a0,a1,m,a3,a4,a5,a6,a7,a8,a9) else
    if i = 3 then a := (a0,a1,a2,m,a4,a5,a6,a7,a8,a9) else
    if i = 4 then a := (a0,a1,a2,a3,m,a5,a6,a7,a8,a9) else
    if i = 5 then a := (a0,a1,a2,a3,a4,m,a6,a7,a8,a9) else
    if i = 6 then a := (a0,a1,a2,a3,a4,a5,m,a7,a8,a9) else
    if i = 7 then a := (a0,a1,a2,a3,a4,a5,a6,m,a8,a9) else
    if i = 8 then a := (a0,a1,a2,a3,a4,a5,a6,a7,m,a9) else
    if i = 9 then a := (a0,a1,a2,a3,a4,a5,a6,a7,a8,m) else _bot_
  in
  (a_size, a_get, a_set)
in  
let ar_size ar = let (a_size, _, _) = ar in a_size () in
let ar_get ar = fun i -> let (_, a_get, _) = ar in a_get i in
let ar_set ar = fun i -> fun m -> let (_, _, a_set) = ar in a_set i m in
let ar_copy = (fun ar1 -> fun ar2 ->
  let ar1_size = ar_size ar1 in
  if ar1_size == ar_size ar2 then
    let rec while i =
      if i < ar1_size then
        ar_set ar2 i (ar_get ar1 i); while (i+1)
    in while 0
  else _bot_)
in

fun inout_ar ->

let a = mk_array (ar_size inout_ar) in

ar_copy inout_ar a;

ref flag = 1 in

let rec while2 () =
 if !flag == 1 then
   (ref i = 0 in
    flag := 0;
    let rec while3 () =
     if !i < (ar_size a) - 1 then (
        (if (ar_get a !i) > (ar_get a (!i + 1)) then (
           ref temp = 0 in
           flag := 1;
           temp := ar_get a !i;
           ar_set a !i (ar_get a (!i + 1));
           ar_set a (!i+1) !temp
         )
         else ());
         i := !i + 1;
         while3 ()
        )
     else
      ()
     in
     while3 ();
     while2 ())
 else
  ()
in
while2 ();

ar_copy a inout_ar

|||

let mk_array n = 
  if (n < 1 || n > 10) then _bot_ else
  ref a = (0,0,0,0,0,0,0,0,0,0) in
  let a_size _ = 5 in
  let a_get i =
    if (i < 1 || i > n) then _bot_ else
    let (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) = !a in
    if i = 0 then a0 else
    if i = 1 then a1 else
    if i = 2 then a2 else
    if i = 3 then a3 else
    if i = 4 then a4 else
    if i = 5 then a5 else
    if i = 6 then a6 else
    if i = 7 then a7 else
    if i = 8 then a8 else
    if i = 9 then a9 else _bot_
  in
  let a_set i = fun m ->
    if (i < 1 || i > n) then _bot_ else
    let (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) = !a in
    if i = 0 then a := (m,a1,a2,a3,a4,a5,a6,a7,a8,a9) else
    if i = 1 then a := (a0,m,a2,a3,a4,a5,a6,a7,a8,a9) else
    if i = 2 then a := (a0,a1,m,a3,a4,a5,a6,a7,a8,a9) else
    if i = 3 then a := (a0,a1,a2,m,a4,a5,a6,a7,a8,a9) else
    if i = 4 then a := (a0,a1,a2,a3,m,a5,a6,a7,a8,a9) else
    if i = 5 then a := (a0,a1,a2,a3,a4,m,a6,a7,a8,a9) else
    if i = 6 then a := (a0,a1,a2,a3,a4,a5,m,a7,a8,a9) else
    if i = 7 then a := (a0,a1,a2,a3,a4,a5,a6,m,a8,a9) else
    if i = 8 then a := (a0,a1,a2,a3,a4,a5,a6,a7,m,a9) else
    if i = 9 then a := (a0,a1,a2,a3,a4,a5,a6,a7,a8,m) else _bot_
  in
  (a_size, a_get, a_set)
in  
let ar_size ar = let (a_size, _, _) = ar in a_size () in
let ar_get ar = fun i -> let (_, a_get, _) = ar in a_get i in
let ar_set ar = fun i -> fun m -> let (_, _, a_set) = ar in a_set i m in
let ar_copy = (fun ar1 -> fun ar2 ->
  let ar1_size = ar_size ar1 in
  if ar1_size == ar_size ar2 then
    let rec while i =
      if i < ar1_size then
        ar_set ar2 i (ar_get ar1 i); while (i+1)
    in while 0
  else _bot_)
in



fun inout_ar ->

let a = mk_array (ar_size inout_ar) in

ar_copy inout_ar a;

ref i = 1 in
let rec while2 () =
 if !i < ar_size a then
 (
    ref val = 0 in
    ref j = 0 in
    val := ar_get a !i;
    j := !i;
    let rec while3 () =
     if !j > 0 && ((ar_get a (!j - 1)) <= (!val)) then
     (
       ar_set a !j (ar_get a (!j - 1));
       j := !j - 1;
       while3 ()
     )
     else ()
     in
     while3 ();
     ar_set a !j !val;
     i := !i + 1;
     while2 ()
 )
 else ()
in
while2 ();

ar_copy a inout_ar
