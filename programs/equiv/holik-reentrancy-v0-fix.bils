(fun oppfuns ->
let send = fst oppfuns in
let assert = snd oppfuns in

ref funds = 100 in
let withdraw m { w | funds as w | w >= 0 } = 
    (if not(!funds < m)
    then (funds := !funds - m; send m)
    else ());
    assert(!funds >= 0)
in withdraw)

|||_((int->unit) * (bool->unit))->(int->unit)

(fun oppfuns ->
let send = fst oppfuns in
let assert = snd oppfuns in

ref funds = 100 in
let withdraw m { w | funds as w | w >= 0 } = 
    (if not(!funds < m)
    then (funds := !funds - m; send m)
    else ());
    assert(true)
in withdraw)
