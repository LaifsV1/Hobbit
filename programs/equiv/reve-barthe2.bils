# source: https://formal.iti.kit.edu/projects/improve/reve/?ex=loop%2Fbarthe2

# let n = 6
# (i,x)=>(0,0)=>(0+1,0+0)=>(1+1,0+1)=>(2+1,1+2)=>(3+1,3+3)
#      =>(4+1,6+4)=>(5+1,10+5)

# (j,x)=>(1,0)=>(1+1,0+1)=>(2+1,1+2)=>(3+1,3+3)=>(4+1,6+4)
#      =>(5+1,10+5)=>(6+1,15+6)

# works because the first 2 on the LHS are 0, which don't add up to N if N > 0.
# if N = 0, then first two outputs are 0 still. So N = 1 outputs 1 on both sides.

fun n ->
  ref i = 0 in
  ref x = 0 in
  let rec while _ =
    if (!i <= n) then (
        (if (!i > 0) then _sync_ ()); (* annotation *)
        x := !x + !i;
        i := !i + 1;
        while ())
    else ()
  in while ();
  !x
  
|||_int -> int

fun n ->
  ref j = 1 in
  ref x = 0 in
  let rec while _ =
    if (!j <= n) then (
        (if (!j > 0) then _sync_ ()); (* annotation *)
        x := !x + !j;
        j := !j + 1;
        while ())
    else ()
  in while ();
  !x

