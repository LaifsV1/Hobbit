(* qsort based on Haskell implementation from
   https://rosettacode.org/wiki/Sorting_algorithms/Quicksort#Haskell
   needs bound = 21 *)

let list_len = 5 in
let nil = 
  ((0,0,0,0,0),0)
in

let is_nil = fun ls -> let (a,b) = ls in b == 0 in
let hd = fun ls -> if is_nil ls then _bot_ else let (xs,l) = ls in xs[0/5] in
let tl ls =
  if is_nil ls then _bot_ else
  let (xs,l) = ls in
  let (a0,a1,a2,a3,a4) = xs
  in ((a1,a2,a3,a4,0),l-1) in
let cons = fun x -> fun xs ->
  let (ls,l) = xs in
  if l >= list_len then _bot_ else
  let (a0,a1,a2,a3,a4) = ls
  in (( x,a0,a1,a2,a3),l+1) in

let rec append ls1 = fun ls2 ->
  if is_nil ls1 then ls2 else
  let (x,xs) = (hd ls1,tl ls1) in
  cons x (append xs ls2)
in

let is_sorted = fun ls ->
  if is_nil ls then true else
  let rec aux ls = fun last ->
    if is_nil ls then true else
    let (x,xs) = (hd ls,tl ls) in
    if last > x then false
    else aux xs x
  in
  aux ls (hd ls)
in

fun args ->

let (length,read) = args in

let list =
  let rec read_list len =
    if len <= 0 then nil else
    cons (read ()) (read_list (len-1))
  in
  read_list length
in

let rec partition pred = fun ls ->
  if is_nil ls then (nil,nil) else
  let (x,zs) = (hd ls,tl ls) in
  if pred x
  then let (xs,ys) = partition pred zs in (cons x xs, ys)
  else let (xs,ys) = partition pred zs in (xs, cons x ys)
in

let rec qsort ls =
  if is_nil ls then ls else
  let (x,xs) = (hd ls,tl ls) in
  let (ys,zs) = partition (fun y -> y < x) xs in
  append (qsort ys) (cons x (qsort zs))
in

is_sorted (qsort list)

|||

let list_len = 5 in

fun args ->

let (length,read) = args in

let rec read_list len =
  if len <= 0 then () else
  let x = read () in
  (read_list (len-1))
in
read_list length;
true